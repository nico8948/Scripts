#!/usr/bin/env python3
# MessageBird
# Bulk: no
# |----------------------------------------------------------------------------
# | Name         : MessageBird
# | Description  : Send SMS from CheckMK using cUrl
# | Dependencies : curl
# | Script location: /omd/sites/nedasco/local/share/check_mk/notifications
# |----------------------------------------------------------------------------

import os
import requests
import sys
import urllib3
import re
import shutil
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
from cmk.notification_plugins.utils import collect_context
env = os.environ

# Get host phone number
try:
    phone = env['NOTIFY_CONTACTPAGER'].replace(" ", "")
except KeyError:
    sys.stderr.write("Error: Pager Number of %s not set\n" % contactname)
    sys.exit(2)  # Fatal error, no retry

#Get message
raw_context = collect_context()
max_len = 160
message = env['NOTIFY_PARAMETER_BODY'] + " "
message += raw_context["HOSTNAME"] + " "
if raw_context["WHAT"] == "SERVICE":
    message += raw_context["SERVICESTATE"][:2] + " "
    avail_len = max_len - len(message)
    message += raw_context["SERVICEDESC"][:avail_len] + " "
    avail_len = max_len - len(message)
    message += raw_context["SERVICEOUTPUT"][:avail_len]
# Get MessageBird credentials
try:
    messagebirdhosts = [val for key, val in env.items() if key.startswith('NOTIFY_PARAMETER_HOST_')]
    if not messagebirdhosts:
        sys.stdout.write("Hosts for MessageBird not configured!\n")
        sys.exit(2)
    sender = env['NOTIFY_PARAMETER_ORIGINATOR']
    accesskey = env['NOTIFY_PARAMETER_ACCESS_KEY']
except:
    sys.stdout.write("Credentials for MessageBird not configured!\n")
    sys.exit(2)

params = {
    '_method': 'POST',
    'recipients': phone,
    'body': message,
    'originator': sender,
    'access_key': accesskey,
}

count = 0
for messagebirdhost in messagebirdhosts:
    count += 1
    sys.stdout.write("Trying from %s\n" % messagebirdhost)
    try:
        url = 'https://%s/messages' % messagebirdhost
        req = requests.get(url, params=params, timeout=20, verify=False)
        if not req.text.find('OK'):
            raise Exception(req.text)
    except Exception as err:
        sys.stdout.write("ERROR: %s\n" % err)
        sys.stdout.write("Sending sms from %s failed! Trying next gateway.\n" % messagebirdhost)
        if count == len(messagebirdhost):
            sys.stdout.write("No gateway left to try. Could not send SMS!\n")
            sys.exit(1)
        continue
    else:
        sys.stdout.write("SMS Successfully sent from %s\n" % messagebirdhost)
        sys.stdout.write(req.text)
        sys.exit(0)        
